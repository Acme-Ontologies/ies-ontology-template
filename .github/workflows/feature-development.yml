name: Feature Development Workflow

on:
  issues:
    types: [opened, labeled, reopened]
  pull_request:
    types: [opened, closed, reopened, edited]
    branches:
      - develop
      - rc
      - main

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  process_feature:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'enhancement')) ||
      (github.event_name == 'pull_request' && (startsWith(github.event.pull_request.head.ref, 'feature/')))
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Process new feature request
        if: github.event_name == 'issues' && github.event.action != 'closed'
        uses: actions/github-script@v7
        env:
          PROJECT_ID: ${{ secrets.PROJECT_ID }}
          ISSUE_BODY: ${{ toJSON(github.event.issue.body) }}
        with:
          github-token: ${{ secrets.ACME_ONTOLOGIES_PAT }}
          script: |
            const issue = context.payload.issue;
            
            try {
              // Add to project using GraphQL API
              console.log(`Adding issue #${issue.number} to project...`);
              const addToProject = await github.graphql(`
                mutation($projectId:ID!, $contentId:ID!) {
                  addProjectV2ItemById(input: {
                    projectId: $projectId
                    contentId: $contentId
                  }) {
                    item {
                      id
                    }
                  }
                }
              `, {
                projectId: process.env.PROJECT_ID,
                contentId: issue.node_id
              });
              
              // Add additional labels based on issue content
              const labels = ['enhancement'];
              const body = JSON.parse(process.env.ISSUE_BODY);
              
              // Check for documentation-related keywords
              if (body.toLowerCase().includes('document') || 
                  body.toLowerCase().includes('docs') ||
                  body.toLowerCase().includes('specification')) {
                labels.push('documentation');
              }
              
              // Add priority label if specified in the issue
              if (body.toLowerCase().includes('priority:')) {
                const priorityMatch = body.match(/priority:\s*(high|medium|low)/i);
                if (priorityMatch) {
                  labels.push(`priority: ${priorityMatch[1].toLowerCase()}`);
                }
              }
              
              // Add size label if specified
              if (body.toLowerCase().includes('size:')) {
                const sizeMatch = body.match(/size:\s*(xs|s|m|l|xl)/i);
                if (sizeMatch) {
                  labels.push(`size: ${sizeMatch[1].toLowerCase()}`);
                }
              }
              
              if (labels.length > 1) {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  labels: labels
                });
              }
              
              console.log('Feature request processed successfully');
              
            } catch (error) {
              console.error('Error processing feature request:', error);
              core.setFailed(error.message);
            }

      - name: Validate PR target branch
        if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'edited')
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ACME_ONTOLOGIES_PAT }}
          script: |
            const pr = context.payload.pull_request;
            
            try {
              // Validate branch naming and target
              const sourceBranch = pr.head.ref;
              const targetBranch = pr.base.ref;
              
              // Define allowed branch flows
              const allowedFlows = {
                'feature/': 'develop',
                'bugfix/': 'develop',
                'hotfix/': 'main'
              };
              
              // Check if PR is targeting the correct branch
              let isValidFlow = false;
              for (const [prefix, allowedTarget] of Object.entries(allowedFlows)) {
                if (sourceBranch.startsWith(prefix)) {
                  isValidFlow = targetBranch === allowedTarget;
                  if (!isValidFlow) {
                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: pr.number,
                      body: `⚠️ Invalid target branch. ${prefix} branches should target \`${allowedTarget}\` branch, not \`${targetBranch}\`.`
                    });
                    
                    // Add needs-attention label
                    await github.rest.issues.addLabels({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: pr.number,
                      labels: ['needs-attention']
                    });
                  }
                  break;
                }
              }
              
            } catch (error) {
              console.error('Error validating PR target:', error);
              core.setFailed(error.message);
            }

      - name: Process feature PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ACME_ONTOLOGIES_PAT }}
          script: |
            const pr = context.payload.pull_request;
            
            try {
              if (context.payload.action === 'opened' || context.payload.action === 'reopened') {
                // Add default labels
                const labels = ['enhancement', 'needs-review'];
                
                // Check if PR is linked to an issue
                const bodyMatch = pr.body?.match(/(closes|fixes|resolves) #(\d+)/i);
                if (bodyMatch) {
                  const issueNumber = bodyMatch[2];
                  console.log(`PR is linked to issue #${issueNumber}`);
                  
                  // Get linked issue labels
                  const issue = await github.rest.issues.get({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: parseInt(issueNumber)
                  });
                  
                  // Copy priority, size, and documentation labels from linked issue
                  issue.data.labels.forEach(label => {
                    if (label.name.startsWith('priority:') || 
                        label.name.startsWith('size:') || 
                        label.name === 'documentation') {
                      labels.push(label.name);
                    }
                  });
                } else {
                  // Add warning comment if no linked issue
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr.number,
                    body: '⚠️ This PR is not linked to any issue. Please link an issue using "Closes #X" or "Fixes #X" in the PR description.'
                  });
                }
                
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  labels: labels
                });
                
              } else if (context.payload.action === 'closed' && pr.merged) {
                // Remove review-related labels when PR is merged
                const labelsToRemove = ['needs-review', 'needs-attention'];
                for (const label of labelsToRemove) {
                  try {
                    await github.rest.issues.removeLabel({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: pr.number,
                      name: label
                    });
                  } catch (error) {
                    // Ignore error if label doesn't exist
                    if (error.status !== 404) throw error;
                  }
                }
              }
              
              console.log('Pull request processed successfully');
              
            } catch (error) {
              console.error('Error processing pull request:', error);
              core.setFailed(error.message);
            }