name: Create Repository from Template

on:
  workflow_dispatch:
    inputs:
      repo_name:
        description: 'Repository name'
        required: true
        type: string
      repo_description:
        description: 'Repository description'
        required: true
        type: string
      is_public:
        description: 'Public repository?'
        required: true
        type: boolean
        default: false

jobs:
  create_repository:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Create repository and configure
        id: repo-setup
        uses: actions/github-script@v6
        env:
          GH_TOKEN: ${{ secrets.ACME_ONTOLOGIES_PAT }}
        with:
          github-token: ${{ secrets.ACME_ONTOLOGIES_PAT }}
          script: |
            // Create repository from ies-ontology-template
            const repo = await github.rest.repos.createUsingTemplate({
              template_owner: context.repo.owner,
              template_repo: 'ies-ontology-template',
              owner: context.repo.owner,
              name: context.payload.inputs.repo_name,
              description: context.payload.inputs.repo_description,
              include_all_branches: true,
              private: !context.payload.inputs.is_public
            });

            // Get organization ID
            const orgQuery = `
              query {
                organization(login: "${context.repo.owner}") {
                  id
                }
              }
            `;
            const orgResponse = await github.graphql(orgQuery);
            const orgId = orgResponse.organization.id;

            // Create ProjectV2
            const projectQuery = `
              mutation {
                createProjectV2(
                  input: {
                    ownerId: "${orgId}",
                    title: "${context.payload.inputs.repo_name} Development"
                  }
                ) {
                  projectV2 {
                    id
                  }
                }
              }
            `;
            const projectResponse = await github.graphql(projectQuery);
            const projectId = projectResponse.createProjectV2.projectV2.id;

            // Link project to repository
            const linkQuery = `
              mutation {
                linkProjectV2ToRepository(
                  input: {
                    projectId: "${projectId}",
                    repositoryId: "${repo.data.node_id}"
                  }
                ) {
                  repository {
                    id
                  }
                }
              }
            `;
            await github.graphql(linkQuery);

            // Create labels
            const labels = [
              { name: 'bug', color: 'd73a4a', description: "Something isn't working" },
              { name: 'documentation', color: '0075ca', description: 'General documentation tasks' },
              { name: 'duplicate', color: 'cfd3d7', description: 'This issue or pull request already exists' },
              { name: 'enhancement', color: 'a2eeef', description: 'New feature or request' },
              { name: 'good first issue', color: '7057ff', description: 'Good for newcomers' },
              { name: 'help wanted', color: '008672', description: 'Extra attention is needed' },
              { name: 'invalid', color: 'e4e669', description: "This doesn't seem right" },
              { name: 'question', color: 'd876e3', description: 'Further information is requested' },
              { name: 'wontfix', color: 'ffffff', description: 'This will not be worked on' },
              { name: 'priority-high', color: 'b60205', description: 'Urgent issues' },
              { name: 'priority-medium', color: 'fbca04', description: 'Important but not urgent' },
              { name: 'priority-low', color: '0e8a16', description: 'Nice to have' },
              { name: 'wip', color: '1d76db', description: 'Work in progress' },
              { name: 'docs-new', color: '3A4520', description: 'New documentation needed' },
              { name: 'docs-update', color: '464444', description: 'Updates to existing docs' },
              { name: 'docs-fix', color: 'C90572', description: 'Documentation fixes' },
              { name: 'tech-review-needed', color: '48C5DA', description: 'Needs technical review' },
              { name: 'ready-for-review', color: 'F795DF', description: 'Documentation ready for final review' },
              { name: 'docs-clarity', color: '7B61B1', description: 'Improvements to documentation clarity' },
              { name: 'has-issue', color: '0E8A16', description: 'PR linked to an issue' }
            ];

            // Create each label
            for (const label of labels) {
              try {
                await github.rest.issues.createLabel({
                  owner: context.repo.owner,
                  repo: context.payload.inputs.repo_name,
                  name: label.name,
                  color: label.color,
                  description: label.description
                });
                console.log(`Created label: ${label.name}`);
              } catch (error) {
                console.error(`Failed to create label ${label.name}:`, error);
              }
            }

            // Set output for next steps
            core.setOutput('project-id', projectId);

      - name: Create PROJECT_ID Variable
        env:
          GH_TOKEN: ${{ secrets.ACME_ONTOLOGIES_PAT }}
        run: |
          gh api --method POST /repos/${{ github.repository_owner }}/${{ github.event.inputs.repo_name }}/actions/variables \
            -f name='PROJECT_ID' \
            -f value='${{ steps.repo-setup.outputs.project-id }}'