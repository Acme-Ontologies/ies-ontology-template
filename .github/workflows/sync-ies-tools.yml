name: Sync IES Tools

on:
  schedule:
    - cron: '0 1 * * *'
  workflow_dispatch:

env:
  SYNC_DIRS: |
    .github
    ies-tools
  SYNC_FILES: |
    justfile
    poetry.lock
    pyproject.toml

permissions:
  contents: write
  pull-requests: write

jobs:
  sync:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.ACME_ONTOLOGIES_PAT }}
    steps:
      - name: Checkout consuming repository
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.ACME_ONTOLOGIES_PAT }}

      - name: Debug Config
        run: |
          echo "Directories to sync:"
          echo "$SYNC_DIRS" | while read -r dir; do
            if [ ! -z "$dir" ]; then
              echo "- $dir"
            fi
          done

          echo "Files to sync:"
          echo "$SYNC_FILES" | while read -r file; do
            if [ ! -z "$file" ]; then
              echo "- $file"
            fi
          done

      - name: Debug API Access
        run: |
          echo "Testing API access to repository..."
          gh api /repos/Acme-Ontologies/ies-ontology-template --jq '.name'

      - name: Sync Configuration
        run: |
          # Function to recursively process directories
          process_directory() {
            local dir="$1"
            echo "Processing directory: $dir"
            
            # Get contents of directory
            gh api "/repos/Acme-Ontologies/ies-ontology-template/contents/$dir" \
              --jq '.[] | {path: .path, type: .type, name: .name}' | while read -r item; do
              item_path=$(echo "$item" | jq -r '.path')
              item_type=$(echo "$item" | jq -r '.type')
              item_name=$(echo "$item" | jq -r '.name')
              
              if [ "$item_type" = "file" ]; then
                echo "Downloading file: $item_path"
                mkdir -p "temp_sync/$(dirname "$item_path")"
                gh api "/repos/Acme-Ontologies/ies-ontology-template/contents/$item_path" \
                  --header "Accept: application/vnd.github.raw" \
                  > "temp_sync/$item_path"
              elif [ "$item_type" = "dir" ]; then
                echo "Processing subdirectory: $item_path"
                mkdir -p "temp_sync/$item_path"
                # Recursively process subdirectory
                process_directory "$item_path"
              fi
            done
          }
          
          # Create temp directory
          mkdir -p temp_sync
          
          # Process each directory to sync
          echo "$SYNC_DIRS" | while read -r dir; do
            if [ ! -z "$dir" ]; then
              mkdir -p "temp_sync/$(dirname "$dir")"
              process_directory "$dir"
            fi
          done
          
          # Process individual files
          echo "$SYNC_FILES" | while read -r file; do
            if [ ! -z "$file" ]; then
              echo "Processing file: $file"
              mkdir -p "temp_sync/$(dirname "$file")"
              gh api "/repos/Acme-Ontologies/ies-ontology-template/contents/$file" \
                --header "Accept: application/vnd.github.raw" \
                > "temp_sync/$file" || echo "Warning: Failed to download $file"
            fi
          done
          
          # Initialize changes file
          echo "false" > changes_detected.txt
          
          # Compare directories recursively
          echo "$SYNC_DIRS" | while read -r dir; do
            if [ ! -z "$dir" ]; then
              if [ ! -d "$dir" ] || [ -n "$(diff -r "temp_sync/$dir" "$dir" 2>/dev/null)" ]; then
                echo "true" > changes_detected.txt
                echo "Changes detected in directory: $dir"
              fi
            fi
          done
          
          # Compare individual files
          echo "$SYNC_FILES" | while read -r file; do
            if [ ! -z "$file" ] && [ -f "temp_sync/$file" ]; then
              if [ ! -f "$file" ] || ! cmp -s "temp_sync/$file" "$file"; then
                echo "true" > changes_detected.txt
                echo "Changes detected in file: $file"
              fi
            fi
          done
          
          # If changes detected, update files
          if [ "$(cat changes_detected.txt)" = "true" ]; then
            # Update directories
            echo "$SYNC_DIRS" | while read -r dir; do
              if [ ! -z "$dir" ]; then
                rm -rf "$dir"
                mkdir -p "$(dirname "$dir")"
                cp -r "temp_sync/$dir" "$(dirname "$dir")/"
              fi
            done
            
            # Update individual files
            echo "$SYNC_FILES" | while read -r file; do
              if [ ! -z "$file" ] && [ -f "temp_sync/$file" ]; then
                mkdir -p "$(dirname "$file")"
                cp "temp_sync/$file" "$file"
              fi
            done
            
            echo "has_changes=true" >> $GITHUB_ENV
          else
            echo "No changes detected"
          fi
          
          rm -rf temp_sync changes_detected.txt

      - name: Create Pull Request
        if: env.has_changes == 'true'
        run: |
          # Configure git
          git config user.name "github-actions"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Create branch
          branch_name="sync-config-$(date +%Y%m%d-%H%M%S)"
          git checkout -b $branch_name
          
          # Create PR description
          pr_body="# Configuration Sync from Acme-Ontologies/ies-ontology-template\n\n"
          pr_body+="This PR synchronizes configuration from the central repository.\n\n"
          pr_body+="## Changes\n"
          
          # Add changes to PR description
          git add .
          changes=$(git diff --cached --name-status)
          
          while read -r status file; do
            case $status in
              A) pr_body+="‚ú® Added: $file\n" ;;
              M) pr_body+="üìù Modified: $file\n" ;;
              D) pr_body+="üóëÔ∏è Deleted: $file\n" ;;
            esac
          done <<< "$changes"
          
          # Commit and push
          git commit -m "Sync configuration from Acme-Ontologies/ies-ontology-template"
          git push origin $branch_name
          
          # Create PR
          gh pr create \
            --title "üì¶ Sync configuration from Acme-Ontologies/ies-ontology-template" \
            --body "$pr_body" \
            --base main \
            --head $branch_name
