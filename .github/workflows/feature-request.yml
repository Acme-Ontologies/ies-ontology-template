name: Create Feature Request

on:
  workflow_dispatch:
    inputs:
      title:
        description: 'Feature title'
        required: true
        type: string
      problem:
        description: 'Problem statement'
        required: true
        type: string
      solution:
        description: 'Proposed solution'
        required: true
        type: string
      priority:
        description: 'Priority level'
        required: true
        type: choice
        options:
          - priority:low
          - priority:medium
          - priority:high
      size:
        description: 'Estimated size'
        required: true
        type: choice
        options:
          - size:xs
          - size:s
          - size:m
          - size:l
          - size:xl
      type:
        description: 'Type of change (comma-separated if multiple)'
        required: true
        type: choice
        options:
          - Core Functionality
          - Documentation
          - Tests
          - Performance
          - User Interface
          - Build System
          - Dependencies
      acceptance:
        description: 'Acceptance criteria (bullet points)'
        required: true
        type: string

permissions:
  contents: write
  issues: write

jobs:
  create_feature:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PROJECT_ID: ${{ vars.PROJECT_ID }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0

      - name: Create feature issue
        id: create_issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Create issue title with [Feature] prefix
            const title = `[Feature] ${context.payload.inputs.title}`;
            
            // Format the issue body using the template structure
            const body = `
            ## Problem Statement
            ${context.payload.inputs.problem}

            ## Proposed Solution
            ${context.payload.inputs.solution}

            ## Priority
            ${context.payload.inputs.priority}

            ## Size
            ${context.payload.inputs.size}

            ## Type of Change
            ${context.payload.inputs.type}

            ## Acceptance Criteria
            ${context.payload.inputs.acceptance}
            `;
            
            try {
              // Create the issue
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['enhancement']
              });
              
              console.log(`Created issue #${issue.data.number}`);
              
              // Return issue number for other steps
              return { issueNumber: issue.data.number };
              
            } catch (error) {
              console.error('Error creating issue:', error);
              core.setFailed(error.message);
            }

      - name: Add issue to project
        env:
          ISSUE_ID: ${{ fromJSON(steps.create_issue.outputs.result).issueNumber }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              // Get issue node ID using GraphQL
              const getIssueId = await github.graphql(`
                query($owner: String!, $repo: String!, $number: Int!) {
                  repository(owner: $owner, name: $repo) {
                    issue(number: $number) {
                      id
                    }
                  }
                }
              `, {
                owner: context.repo.owner,
                repo: context.repo.repo,
                number: parseInt(process.env.ISSUE_ID)
              });
              
              const issueId = getIssueId.repository.issue.id;
              
              // Add to project using GraphQL
              await github.graphql(`
                mutation($projectId: ID!, $contentId: ID!) {
                  addProjectV2ItemById(input: {
                    projectId: $projectId
                    contentId: $contentId
                  }) {
                    item {
                      id
                    }
                  }
                }
              `, {
                projectId: process.env.PROJECT_ID,
                contentId: issueId
              });
              
              console.log(`Added issue #${process.env.ISSUE_ID} to project ${process.env.PROJECT_ID}`);
              
            } catch (error) {
              console.error('Error adding issue to project:', error);
              core.setFailed(error.message);
            }

      - name: Create feature branch
        env:
          ISSUE_NUMBER: ${{ fromJSON(steps.create_issue.outputs.result).issueNumber }}
        run: |
          # Create sanitized branch name from issue title
          BRANCH_NAME="feature/$(echo "${{ inputs.title }}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-zA-Z0-9]/-/g')-$ISSUE_NUMBER"
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Create new branch from develop
          git checkout -b "$BRANCH_NAME"
          
          # Create initial commit with issue reference
          echo "# Feature Implementation" > feature-implementation.md
          echo "" >> feature-implementation.md
          echo "Implements #$ISSUE_NUMBER" >> feature-implementation.md
          
          git add feature-implementation.md
          git commit -m "feat: initial commit for #$ISSUE_NUMBER"
          git push origin "$BRANCH_NAME"
          
          echo "Created branch $BRANCH_NAME"