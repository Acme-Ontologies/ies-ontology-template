name: Sync GitHub Configuration

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout consuming repository
        uses: actions/checkout@v4
        with:
          ref: main
          
      - name: Sync GitHub configuration
        run: |
          # Create temp directory
          mkdir -p temp_github
          
          # Get list of all files and directories under .github
          contents=$(gh api /repos/Acme-Ontologies/ies-github-workflows/contents/.github \
            --jq '.[] | {name: .name, type: .type}' \
            --header "Accept: application/vnd.github.v3+json")
            
          # Process each item (file or directory)
          echo "$contents" | while read -r item; do
            name=$(echo "$item" | jq -r '.name')
            type=$(echo "$item" | jq -r '.type')
            
            if [ "$type" = "file" ]; then
              echo "Downloading file: $name"
              gh api /repos/Acme-Ontologies/ies-github-workflows/contents/.github/$name \
                --header "Accept: application/vnd.github.raw" \
                > "temp_github/$name"
            elif [ "$type" = "dir" ]; then
              echo "Processing directory: $name"
              mkdir -p "temp_github/$name"
              
              # Get files in this directory
              files=$(gh api /repos/Acme-Ontologies/ies-github-workflows/contents/.github/$name \
                --jq '.[].name' \
                --header "Accept: application/vnd.github.v3+json")
                
              # Download each file in directory
              for file in $files; do
                echo "Downloading $name/$file"
                gh api /repos/Acme-Ontologies/ies-github-workflows/contents/.github/$name/$file \
                  --header "Accept: application/vnd.github.raw" \
                  > "temp_github/$name/$file"
              done
            fi
          done
          
          # Create .github directory if it doesn't exist
          mkdir -p .github
          
          # Compare directories to detect changes
          changes_detected=false
          
          # First, compare files in root .github directory
          for file in $(ls temp_github/ 2>/dev/null | grep -v "/$"); do
            if [ ! -f ".github/$file" ] || \
               ! cmp -s "temp_github/$file" ".github/$file"; then
              changes_detected=true
              echo "Change detected in $file"
            fi
          done
          
          # Check for deleted files in root
          for file in $(ls .github/ 2>/dev/null | grep -v "/$"); do
            if [ ! -f "temp_github/$file" ]; then
              changes_detected=true
              echo "File deleted: $file"
            fi
          done
          
          # Then check subdirectories
          for dir in $(ls -d temp_github/*/ 2>/dev/null || echo ""); do
            dir=${dir%/}
            dir=${dir#temp_github/}
            
            if [ ! -d ".github/$dir" ]; then
              changes_detected=true
              echo "New directory: $dir"
            else
              # Compare files in directory
              for file in $(ls "temp_github/$dir" 2>/dev/null || echo ""); do
                if [ ! -f ".github/$dir/$file" ] || \
                   ! cmp -s "temp_github/$dir/$file" ".github/$dir/$file"; then
                  changes_detected=true
                  echo "Change detected in $dir/$file"
                fi
              done
              
              # Check for deleted files
              for file in $(ls ".github/$dir" 2>/dev/null || echo ""); do
                if [ ! -f "temp_github/$dir/$file" ]; then
                  changes_detected=true
                  echo "File deleted: $dir/$file"
                fi
              done
            fi
          done
          
          # Check for deleted directories
          for dir in $(ls -d .github/*/ 2>/dev/null || echo ""); do
            dir=${dir%/}
            dir=${dir#.github/}
            if [ ! -d "temp_github/$dir" ]; then
              changes_detected=true
              echo "Directory deleted: $dir"
            fi
          done
          
          # If changes detected, replace .github directory contents
          if [ "$changes_detected" = true ]; then
            rm -rf .github/*
            cp -r temp_github/* .github/
            echo "has_changes=true" >> $GITHUB_ENV
          fi
          rm -rf temp_github
          
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create Pull Request
        if: env.has_changes == 'true'
        run: |
          # Configure git
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # Create a new branch
          branch_name="sync-github-config-$(date +%Y%m%d-%H%M%S)"
          git checkout -b $branch_name
          
          # Create detailed PR description
          pr_body="# GitHub Configuration Sync from Acme-Ontologies/ies-github-workflows\n\n"
          pr_body+="This PR synchronizes all GitHub configuration files (.github directory) from the organization's central repository.\n\n"
          pr_body+="## Changes\n"
          
          # Compare with previous commit to list changes
          git add .github/
          changes=$(git diff --cached --name-status)
          
          while read -r status file; do
            case $status in
              A) pr_body+="‚ú® Added: ${file#.github/}\n" ;;
              M) pr_body+="üìù Modified: ${file#.github/}\n" ;;
              D) pr_body+="üóëÔ∏è Deleted: ${file#.github/}\n" ;;
            esac
          done <<< "$changes"
          
          # Commit and create PR
          git commit -m "Sync GitHub configuration from Acme-Ontologies/ies-github-workflows"
          git push origin $branch_name
          
          gh pr create \
            --title "üì¶ Sync GitHub configuration from Acme-Ontologies/ies-github-workflows" \
            --body "$pr_body" \
            --base main \
            --head $branch_name
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
